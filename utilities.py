import cv2
import numpy as np

image = np.ones((300, 300, 3), np.uint8) * 255

pt1 = (150, 100)
pt2 = (100, 200)
pt3 = (200, 200)

cv2.circle(image, pt1, 2, (0,0,255), -1)
cv2.circle(image, pt2, 2, (0,0,255), -1)
cv2.circle(image, pt3, 2, (0,0,255), -1)

# format for triangle coordinates
triangle_cnt = np.array( [pt1, pt2, pt3] )
# draw triangle in image
cv2.drawContours(image, [triangle_cnt], 0, (0,255,0), -1)

cv2.imshow("image", image)
cv2.waitKey()

"""
Idea for simple algorithm:
We create from DNA some number of triangles (6 values for shape and 3 for colors).
We can have many DNAs and each iteration create new.
Calculate how much there are similar to source image (of shape (n,m,3)).
Then take only some of them to the next iteration.
To calculate image generated by DNA we need to deal with two or more triangles in the same point and
take average from they values.
To do this I suggest create to create two arrays:
First array of shape (n,m,3) when we can hold sum of all triangles values in each point,
Second of shape (n,m) when we will keep amounts of triangles we add to each point.
To get a final picture we will divide first by second (0 in second should be converted to 1).

We can displaying our image after N iteration.
"""